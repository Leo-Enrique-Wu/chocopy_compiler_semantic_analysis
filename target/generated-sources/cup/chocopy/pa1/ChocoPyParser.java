
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package chocopy.pa1;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import chocopy.common.astnodes.*;
import chocopy.pa2.common.astnodes.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ChocoPyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ChocoPyTokens.class;
}

  /** Default constructor. */
  @Deprecated
  public ChocoPyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ChocoPyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ChocoPyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\004\000\002\004\002\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\030\005\000\002" +
    "\026\015\000\002\026\014\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\025\017\000\002\025\015\000" +
    "\002\025\005\000\002\034\006\000\002\031\005\000\002" +
    "\033\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\005\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\002\000\002\007\002\000\002\007\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\015\004\000\002\015\006\000\002\015" +
    "\010\000\002\015\007\000\002\015\006\000\002\011\007" +
    "\000\002\011\006\000\002\011\005\000\002\010\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\020\003\000\002\020\003\000\002\016\003\000\002\017" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\002\000\002\021\003\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\007\000\002\024\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\003\000\002\023\006\000\002\023\005" +
    "\000\002\023\003\000\002\023\006\000\002\023\003\000" +
    "\002\023\004\000\002\035\005\000\002\036\006\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\052\002\uffff\003\uffff\005\uffff\006\uffff\007" +
    "\uffff\014\uffff\025\uffff\026\uffff\027\uffff\030\uffff\032\uffff" +
    "\035\uffff\037\uffff\053\uffff\066\uffff\070\uffff\076\uffff\077" +
    "\uffff\100\uffff\101\uffff\001\002\000\004\002\304\001\002" +
    "\000\052\002\uffe0\003\033\005\031\006\050\007\041\014" +
    "\020\025\022\026\027\027\023\030\047\032\024\035\044" +
    "\037\015\053\016\066\013\070\051\076\046\077\043\100" +
    "\012\101\053\001\002\000\004\065\301\001\002\000\052" +
    "\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\014\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\032\ufffe\035\ufffe\037\ufffe" +
    "\053\ufffe\066\ufffe\070\ufffe\076\ufffe\077\ufffe\100\ufffe\101" +
    "\ufffe\001\002\000\004\002\000\001\002\000\060\004\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\032\uffbb\034\uffbb\052\200\053" +
    "\201\054\177\055\203\056\176\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\067\uffbb\070\202\071\uffbb\072" +
    "\uffbb\073\uffbb\074\204\001\002\000\060\004\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\032\uffa4\034\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\001\002\000\030\005\031\006\050\007\041" +
    "\014\020\053\016\066\013\070\051\076\046\077\043\100" +
    "\012\101\053\001\002\000\060\004\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\032\uffb2\034\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\001\002\000\004\101\053\001\002\000\026\005\031" +
    "\006\050\007\041\053\016\066\013\070\051\076\046\077" +
    "\043\100\012\101\053\001\002\000\054\004\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\032\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffca\066\100\070\uffb0\073\154\074\uffb0\001" +
    "\002\000\030\005\031\006\050\007\041\014\020\053\016" +
    "\066\013\070\051\076\046\077\043\100\012\101\053\001" +
    "\002\000\052\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\014\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\032\ufffd\035" +
    "\ufffd\037\ufffd\053\ufffd\066\ufffd\070\ufffd\076\ufffd\077\ufffd" +
    "\100\ufffd\101\ufffd\001\002\000\004\004\uffcd\001\002\000" +
    "\004\101\053\001\002\000\030\005\031\006\050\007\041" +
    "\014\020\053\016\066\013\070\051\076\046\077\043\100" +
    "\012\101\053\001\002\000\004\004\uffd0\001\002\000\050" +
    "\004\uffab\011\uffab\012\uffab\013\uffab\032\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffc8\070\uffab\074\uffab\001" +
    "\002\000\032\004\uffce\005\031\006\050\007\041\014\020" +
    "\053\016\066\013\070\051\076\046\077\043\100\012\101" +
    "\053\001\002\000\004\065\224\001\002\000\060\004\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\032\uffa6\034\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\001\002\000\004\004\uffd1\001\002" +
    "\000\050\002\uffdb\003\uffdb\005\uffdb\006\uffdb\007\uffdb\014" +
    "\uffdb\025\uffdb\026\uffdb\032\uffdb\035\uffdb\037\uffdb\051\uffdb" +
    "\053\uffdb\066\uffdb\070\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\001\002\000\052\002\ufffc\003\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\014\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032" +
    "\ufffc\035\ufffc\037\ufffc\053\ufffc\066\ufffc\070\ufffc\076\ufffc" +
    "\077\ufffc\100\ufffc\101\ufffc\001\002\000\052\004\uffad\011" +
    "\uffad\012\uffad\013\uffad\032\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\064\uffad\065\uffc9\066\075\070\uffad\074\uffad\001\002" +
    "\000\060\004\uffb3\011\uffb3\012\uffb3\013\uffb3\032\uffb3\034" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\001\002\000\004" +
    "\004\223\001\002\000\046\002\uffdf\003\137\005\031\006" +
    "\050\007\041\014\020\025\022\026\027\032\024\035\044" +
    "\037\015\053\016\066\013\070\051\076\046\077\043\100" +
    "\012\101\053\001\002\000\060\004\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\032\uffa7\034\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074" +
    "\uffa7\001\002\000\042\004\uffc0\011\172\012\uffc0\013\uffc0" +
    "\032\uffc0\034\uffc0\057\167\060\166\061\171\062\170\063" +
    "\174\064\173\067\uffc0\071\uffc0\072\uffc0\073\uffc0\001\002" +
    "\000\060\004\uffa2\011\uffa2\012\uffa2\013\uffa2\032\uffa2\034" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\001\002\000\030" +
    "\005\031\006\050\007\041\014\020\053\016\066\013\070" +
    "\051\076\046\077\043\100\012\101\053\001\002\000\012" +
    "\004\uffcc\012\065\013\067\032\066\001\002\000\060\004" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\032\uffa3\034\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\072\uffa3\073\uffa3\074\uffa3\001\002\000\006\003\103\101" +
    "\053\001\002\000\060\004\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\032\uffa5\034\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\001" +
    "\002\000\034\005\031\006\050\007\041\014\020\053\016" +
    "\066\013\070\051\071\uffc1\072\uffc1\076\046\077\043\100" +
    "\012\101\053\001\002\000\050\002\uffde\003\uffde\005\uffde" +
    "\006\uffde\007\uffde\014\uffde\025\uffde\026\uffde\032\uffde\035" +
    "\uffde\037\uffde\051\uffde\053\uffde\066\uffde\070\uffde\076\uffde" +
    "\077\uffde\100\uffde\101\uffde\001\002\000\066\004\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\032\uffe8\034\uffe8\044\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\001\002\000" +
    "\016\012\065\013\067\032\066\067\uffc4\071\uffc4\072\uffc4" +
    "\001\002\000\062\004\uffb0\011\uffb0\012\uffb0\013\uffb0\032" +
    "\uffb0\034\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\066" +
    "\100\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\001\002\000\060\004\uffab\011\uffab\012\uffab\013\uffab\032" +
    "\uffab\034\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\067" +
    "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\001\002" +
    "\000\062\004\uffad\011\uffad\012\uffad\013\uffad\032\uffad\034" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\066\075\067" +
    "\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\001\002" +
    "\000\006\071\061\072\062\001\002\000\060\004\uffae\011" +
    "\uffae\012\uffae\013\uffae\032\uffae\034\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\uffae\067\uffae\070\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\001\002\000\032\003\064\005\031\006" +
    "\050\007\041\014\020\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\016\012\065\013" +
    "\067\032\066\067\uffc3\071\uffc3\072\uffc3\001\002\000\010" +
    "\067\uffc2\071\uffc2\072\uffc2\001\002\000\030\005\031\006" +
    "\050\007\041\014\020\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\030\005\031\006" +
    "\050\007\041\014\020\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\030\005\031\006" +
    "\050\007\041\014\020\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\024\004\uffbd\012" +
    "\065\013\uffbd\032\uffbd\034\uffbd\067\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\001\002\000\012\012\065\013\067\032\066\034" +
    "\072\001\002\000\030\005\031\006\050\007\041\014\020" +
    "\053\016\066\013\070\051\076\046\077\043\100\012\101" +
    "\053\001\002\000\024\004\uffbc\012\065\013\067\032\066" +
    "\034\uffbc\067\uffbc\071\uffbc\072\uffbc\073\uffbc\001\002\000" +
    "\024\004\uffbe\012\uffbe\013\uffbe\032\uffbe\034\uffbe\067\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\001\002\000\034\005\031\006" +
    "\050\007\041\014\020\053\016\066\013\067\uffc1\070\051" +
    "\072\uffc1\076\046\077\043\100\012\101\053\001\002\000" +
    "\006\067\077\072\062\001\002\000\060\004\uffac\011\uffac" +
    "\012\uffac\013\uffac\032\uffac\034\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\001\002\000\034\005\031\006\050\007\041" +
    "\014\020\053\016\066\013\067\uffc1\070\051\072\uffc1\076" +
    "\046\077\043\100\012\101\053\001\002\000\006\067\102" +
    "\072\062\001\002\000\060\004\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\032\uffaf\034\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf" +
    "\001\002\000\004\051\156\001\002\000\004\066\105\001" +
    "\002\000\010\067\uffe1\072\uffe1\101\053\001\002\000\006" +
    "\067\uffe4\072\uffe4\001\002\000\004\073\154\001\002\000" +
    "\006\067\112\072\111\001\002\000\006\003\153\101\053" +
    "\001\002\000\006\073\113\075\114\001\002\000\004\004" +
    "\145\001\002\000\010\070\117\077\115\101\120\001\002" +
    "\000\014\065\uffe6\067\uffe6\071\uffe6\072\uffe6\073\uffe6\001" +
    "\002\000\004\073\123\001\002\000\010\070\117\077\115" +
    "\101\120\001\002\000\014\065\uffe7\067\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\001\002\000\004\071\122\001\002\000\014" +
    "\065\uffe5\067\uffe5\071\uffe5\072\uffe5\073\uffe5\001\002\000" +
    "\004\004\124\001\002\000\004\050\125\001\002\000\052" +
    "\003\ufffa\005\ufffa\006\ufffa\007\ufffa\014\ufffa\025\ufffa\026" +
    "\ufffa\030\ufffa\032\ufffa\035\ufffa\037\ufffa\041\ufffa\042\ufffa" +
    "\053\ufffa\066\ufffa\070\ufffa\076\ufffa\077\ufffa\100\ufffa\101" +
    "\ufffa\001\002\000\052\003\033\005\031\006\050\007\041" +
    "\014\020\025\022\026\027\030\047\032\024\035\044\037" +
    "\015\041\133\042\131\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\052\003\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\014\ufffb\025\ufffb\026\ufffb\030\ufffb" +
    "\032\ufffb\035\ufffb\037\ufffb\041\ufffb\042\ufffb\053\ufffb\066" +
    "\ufffb\070\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\001\002" +
    "\000\052\003\ufff9\005\ufff9\006\ufff9\007\ufff9\014\ufff9\025" +
    "\ufff9\026\ufff9\030\ufff9\032\ufff9\035\ufff9\037\ufff9\041\ufff9" +
    "\042\ufff9\053\ufff9\066\ufff9\070\ufff9\076\ufff9\077\ufff9\100" +
    "\ufff9\101\ufff9\001\002\000\004\101\053\001\002\000\052" +
    "\003\ufff8\005\ufff8\006\ufff8\007\ufff8\014\ufff8\025\ufff8\026" +
    "\ufff8\030\ufff8\032\ufff8\035\ufff8\037\ufff8\041\ufff8\042\ufff8" +
    "\053\ufff8\066\ufff8\070\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\001\002\000\004\101\053\001\002\000\046\003\137" +
    "\005\031\006\050\007\041\014\020\025\022\026\027\032" +
    "\024\035\044\037\015\051\136\053\016\066\013\070\051" +
    "\076\046\077\043\100\012\101\053\001\002\000\052\004" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\032\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffca\066\100\070\uffb0\074\uffb0" +
    "\001\002\000\060\002\uffed\003\uffed\005\uffed\006\uffed\007" +
    "\uffed\014\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed" +
    "\035\uffed\037\uffed\041\uffed\042\uffed\051\uffed\053\uffed\066" +
    "\uffed\070\uffed\076\uffed\077\uffed\100\uffed\101\uffed\001\002" +
    "\000\050\002\uffdc\003\uffdc\005\uffdc\006\uffdc\007\uffdc\014" +
    "\uffdc\025\uffdc\026\uffdc\032\uffdc\035\uffdc\037\uffdc\051\uffdc" +
    "\053\uffdc\066\uffdc\070\uffdc\076\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\001\002\000\050\002\uffdd\003\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\014\uffdd\025\uffdd\026\uffdd\032\uffdd\035\uffdd\037" +
    "\uffdd\051\uffdd\053\uffdd\066\uffdd\070\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\001\002\000\004\004\142\001\002\000" +
    "\052\003\ufff7\005\ufff7\006\ufff7\007\ufff7\014\ufff7\025\ufff7" +
    "\026\ufff7\030\ufff7\032\ufff7\035\ufff7\037\ufff7\041\ufff7\042" +
    "\ufff7\053\ufff7\066\ufff7\070\ufff7\076\ufff7\077\ufff7\100\ufff7" +
    "\101\ufff7\001\002\000\004\004\144\001\002\000\052\003" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\014\ufff6\025\ufff6\026\ufff6" +
    "\030\ufff6\032\ufff6\035\ufff6\037\ufff6\041\ufff6\042\ufff6\053" +
    "\ufff6\066\ufff6\070\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6" +
    "\001\002\000\004\050\146\001\002\000\052\003\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\014\ufffa\025\ufffa\026\ufffa\030\ufffa" +
    "\032\ufffa\035\ufffa\037\ufffa\041\ufffa\042\ufffa\053\ufffa\066" +
    "\ufffa\070\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\001\002" +
    "\000\052\003\033\005\031\006\050\007\041\014\020\025" +
    "\022\026\027\030\047\032\024\035\044\037\015\041\133" +
    "\042\131\053\016\066\013\070\051\076\046\077\043\100" +
    "\012\101\053\001\002\000\046\003\137\005\031\006\050" +
    "\007\041\014\020\025\022\026\027\032\024\035\044\037" +
    "\015\051\151\053\016\066\013\070\051\076\046\077\043" +
    "\100\012\101\053\001\002\000\060\002\uffec\003\uffec\005" +
    "\uffec\006\uffec\007\uffec\014\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\032\uffec\035\uffec\037\uffec\041\uffec\042\uffec\051" +
    "\uffec\053\uffec\066\uffec\070\uffec\076\uffec\077\uffec\100\uffec" +
    "\101\uffec\001\002\000\006\067\uffe3\072\uffe3\001\002\000" +
    "\006\067\uffe2\072\uffe2\001\002\000\010\070\117\077\115" +
    "\101\120\001\002\000\010\065\uffe9\067\uffe9\072\uffe9\001" +
    "\002\000\060\002\uffeb\003\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\014\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\035" +
    "\uffeb\037\uffeb\041\uffeb\042\uffeb\051\uffeb\053\uffeb\066\uffeb" +
    "\070\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\001\002\000" +
    "\012\012\065\013\067\032\066\073\160\001\002\000\004" +
    "\004\162\001\002\000\050\002\uffd9\003\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\014\uffd9\025\uffd9\026\uffd9\032\uffd9\035\uffd9" +
    "\037\uffd9\051\uffd9\053\uffd9\066\uffd9\070\uffd9\076\uffd9\077" +
    "\uffd9\100\uffd9\101\uffd9\001\002\000\004\050\163\001\002" +
    "\000\044\003\033\005\031\006\050\007\041\014\020\025" +
    "\022\026\027\032\024\035\044\037\015\053\016\066\013" +
    "\070\051\076\046\077\043\100\012\101\053\001\002\000" +
    "\046\003\137\005\031\006\050\007\041\014\020\025\022" +
    "\026\027\032\024\035\044\037\015\051\165\053\016\066" +
    "\013\070\051\076\046\077\043\100\012\101\053\001\002" +
    "\000\054\002\uffd2\003\uffd2\005\uffd2\006\uffd2\007\uffd2\014" +
    "\uffd2\025\uffd2\026\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\037\uffd2\051\uffd2\053\uffd2\066\uffd2\070\uffd2\076\uffd2\077" +
    "\uffd2\100\uffd2\101\uffd2\001\002\000\026\005\031\006\050" +
    "\007\041\053\016\066\013\070\051\076\046\077\043\100" +
    "\012\101\053\001\002\000\026\005\031\006\050\007\041" +
    "\053\016\066\013\070\051\076\046\077\043\100\012\101" +
    "\053\001\002\000\026\005\031\006\050\007\041\053\016" +
    "\066\013\070\051\076\046\077\043\100\012\101\053\001" +
    "\002\000\026\005\031\006\050\007\041\053\016\066\013" +
    "\070\051\076\046\077\043\100\012\101\053\001\002\000" +
    "\026\005\031\006\050\007\041\053\016\066\013\070\051" +
    "\076\046\077\043\100\012\101\053\001\002\000\026\005" +
    "\031\006\050\007\041\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\026\005\031\006" +
    "\050\007\041\053\016\066\013\070\051\076\046\077\043" +
    "\100\012\101\053\001\002\000\060\004\uffba\011\uffba\012" +
    "\uffba\013\uffba\032\uffba\034\uffba\052\200\053\201\054\177" +
    "\055\203\056\176\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\067\uffba\070\202\071\uffba\072\uffba\073\uffba" +
    "\074\204\001\002\000\026\005\031\006\050\007\041\053" +
    "\016\066\013\070\051\076\046\077\043\100\012\101\053" +
    "\001\002\000\026\005\031\006\050\007\041\053\016\066" +
    "\013\070\051\076\046\077\043\100\012\101\053\001\002" +
    "\000\026\005\031\006\050\007\041\053\016\066\013\070" +
    "\051\076\046\077\043\100\012\101\053\001\002\000\026" +
    "\005\031\006\050\007\041\053\016\066\013\070\051\076" +
    "\046\077\043\100\012\101\053\001\002\000\030\005\031" +
    "\006\050\007\041\014\020\053\016\066\013\070\051\076" +
    "\046\077\043\100\012\101\053\001\002\000\026\005\031" +
    "\006\050\007\041\053\016\066\013\070\051\076\046\077" +
    "\043\100\012\101\053\001\002\000\004\101\053\001\002" +
    "\000\064\004\uffa9\011\uffa9\012\uffa9\013\uffa9\032\uffa9\034" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9" +
    "\001\002\000\060\004\uff9e\011\uff9e\012\uff9e\013\uff9e\032" +
    "\uff9e\034\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\067" +
    "\uff9e\070\202\071\uff9e\072\uff9e\073\uff9e\074\204\001\002" +
    "\000\012\012\065\013\067\032\066\071\210\001\002\000" +
    "\062\004\uffa8\011\uffa8\012\uffa8\013\uffa8\032\uffa8\034\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\001\002\000" +
    "\060\004\uffa0\011\uffa0\012\uffa0\013\uffa0\032\uffa0\034\uffa0" +
    "\052\uffa0\053\uffa0\054\177\055\203\056\176\057\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\067\uffa0\070\202" +
    "\071\uffa0\072\uffa0\073\uffa0\074\204\001\002\000\060\004" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\032\uffa1\034\uffa1\052\uffa1" +
    "\053\uffa1\054\177\055\203\056\176\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\067\uffa1\070\202\071\uffa1" +
    "\072\uffa1\073\uffa1\074\204\001\002\000\060\004\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\032\uff9f\034\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\067\uff9f\070\202\071\uff9f\072\uff9f" +
    "\073\uff9f\074\204\001\002\000\060\004\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\032\uff9d\034\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\067\uff9d\070\202\071\uff9d\072\uff9d\073\uff9d" +
    "\074\204\001\002\000\060\004\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\032\uffb9\034\uffb9\052\200\053\201\054\177\055\203" +
    "\056\176\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\067\uffb9\070\202\071\uffb9\072\uffb9\073\uffb9\074\204" +
    "\001\002\000\060\004\uffb4\011\uffb4\012\uffb4\013\uffb4\032" +
    "\uffb4\034\uffb4\052\200\053\201\054\177\055\203\056\176" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067" +
    "\uffb4\070\202\071\uffb4\072\uffb4\073\uffb4\074\204\001\002" +
    "\000\060\004\uffb7\011\uffb7\012\uffb7\013\uffb7\032\uffb7\034" +
    "\uffb7\052\200\053\201\054\177\055\203\056\176\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\070" +
    "\202\071\uffb7\072\uffb7\073\uffb7\074\204\001\002\000\060" +
    "\004\uffb8\011\uffb8\012\uffb8\013\uffb8\032\uffb8\034\uffb8\052" +
    "\200\053\201\054\177\055\203\056\176\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\067\uffb8\070\202\071" +
    "\uffb8\072\uffb8\073\uffb8\074\204\001\002\000\060\004\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\032\uffb5\034\uffb5\052\200\053" +
    "\201\054\177\055\203\056\176\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\067\uffb5\070\202\071\uffb5\072" +
    "\uffb5\073\uffb5\074\204\001\002\000\060\004\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\032\uffb6\034\uffb6\052\200\053\201\054" +
    "\177\055\203\056\176\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\067\uffb6\070\202\071\uffb6\072\uffb6\073" +
    "\uffb6\074\204\001\002\000\050\002\uffda\003\uffda\005\uffda" +
    "\006\uffda\007\uffda\014\uffda\025\uffda\026\uffda\032\uffda\035" +
    "\uffda\037\uffda\051\uffda\053\uffda\066\uffda\070\uffda\076\uffda" +
    "\077\uffda\100\uffda\101\uffda\001\002\000\030\005\031\006" +
    "\050\007\041\014\020\053\016\066\013\070\051\076\046" +
    "\077\043\100\012\101\053\001\002\000\012\004\uffcb\012" +
    "\065\013\067\032\066\001\002\000\052\004\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\032\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffc7\066\100\070\uffb0\074\uffb0\001\002\000" +
    "\050\004\uffab\011\uffab\012\uffab\013\uffab\032\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffc5\070\uffab\074\uffab" +
    "\001\002\000\052\004\uffad\011\uffad\012\uffad\013\uffad\032" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffc6\066" +
    "\075\070\uffad\074\uffad\001\002\000\012\004\uffcf\012\065" +
    "\013\067\032\066\001\002\000\012\012\065\013\067\032" +
    "\066\073\233\001\002\000\004\004\162\001\002\000\054" +
    "\002\uffd6\003\uffd6\005\uffd6\006\uffd6\007\uffd6\014\uffd6\025" +
    "\uffd6\026\uffd6\032\uffd6\033\236\034\235\035\uffd6\037\uffd6" +
    "\051\uffd6\053\uffd6\066\uffd6\070\uffd6\076\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\001\002\000\004\073\244\001\002\000\030" +
    "\005\031\006\050\007\041\014\020\053\016\066\013\070" +
    "\051\076\046\077\043\100\012\101\053\001\002\000\050" +
    "\002\uffd7\003\uffd7\005\uffd7\006\uffd7\007\uffd7\014\uffd7\025" +
    "\uffd7\026\uffd7\032\uffd7\035\uffd7\037\uffd7\051\uffd7\053\uffd7" +
    "\066\uffd7\070\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\001" +
    "\002\000\012\012\065\013\067\032\066\073\241\001\002" +
    "\000\004\004\162\001\002\000\054\002\uffd4\003\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\014\uffd4\025\uffd4\026\uffd4\032\uffd4" +
    "\033\236\034\235\035\uffd4\037\uffd4\051\uffd4\053\uffd4\066" +
    "\uffd4\070\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\001\002" +
    "\000\050\002\uffd5\003\uffd5\005\uffd5\006\uffd5\007\uffd5\014" +
    "\uffd5\025\uffd5\026\uffd5\032\uffd5\035\uffd5\037\uffd5\051\uffd5" +
    "\053\uffd5\066\uffd5\070\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\001\002\000\004\004\162\001\002\000\050\002\uffd3" +
    "\003\uffd3\005\uffd3\006\uffd3\007\uffd3\014\uffd3\025\uffd3\026" +
    "\uffd3\032\uffd3\035\uffd3\037\uffd3\051\uffd3\053\uffd3\066\uffd3" +
    "\070\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\001\002\000" +
    "\004\066\247\001\002\000\004\101\053\001\002\000\004" +
    "\067\251\001\002\000\004\073\252\001\002\000\004\004" +
    "\253\001\002\000\004\050\254\001\002\000\012\003\260" +
    "\025\261\030\047\101\053\001\002\000\012\003\ufff2\030" +
    "\ufff2\051\ufff2\101\ufff2\001\002\000\012\003\264\030\047" +
    "\051\265\101\053\001\002\000\012\003\ufff3\030\ufff3\051" +
    "\ufff3\101\ufff3\001\002\000\012\003\uffee\030\uffee\051\uffee" +
    "\101\uffee\001\002\000\004\004\262\001\002\000\004\051" +
    "\263\001\002\000\052\002\ufff5\003\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\014\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032" +
    "\ufff5\035\ufff5\037\ufff5\053\ufff5\066\ufff5\070\ufff5\076\ufff5" +
    "\077\ufff5\100\ufff5\101\ufff5\001\002\000\012\003\uffef\030" +
    "\uffef\051\uffef\101\uffef\001\002\000\052\002\ufff4\003\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\014\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\032\ufff4\035\ufff4\037\ufff4\053\ufff4\066\ufff4" +
    "\070\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001\002\000" +
    "\012\003\ufff1\030\ufff1\051\ufff1\101\ufff1\001\002\000\012" +
    "\003\ufff0\030\ufff0\051\ufff0\101\ufff0\001\002\000\024\004" +
    "\uffbf\012\uffbf\013\uffbf\032\uffbf\034\uffbf\067\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\001\002\000\060\004\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\032\uffaa\034\uffaa\052\uffaa\053\uffaa\054\177" +
    "\055\203\056\176\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\067\uffaa\070\202\071\uffaa\072\uffaa\073\uffaa" +
    "\074\204\001\002\000\004\044\273\001\002\000\030\005" +
    "\031\006\050\007\041\014\020\053\016\066\013\070\051" +
    "\076\046\077\043\100\012\101\053\001\002\000\012\012" +
    "\065\013\067\032\066\073\275\001\002\000\004\004\162" +
    "\001\002\000\050\002\uffd8\003\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\014\uffd8\025\uffd8\026\uffd8\032\uffd8\035\uffd8\037\uffd8" +
    "\051\uffd8\053\uffd8\066\uffd8\070\uffd8\076\uffd8\077\uffd8\100" +
    "\uffd8\101\uffd8\001\002\000\012\012\065\013\067\032\066" +
    "\067\300\001\002\000\060\004\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\032\uffb1\034\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1" +
    "\001\002\000\016\005\031\006\050\007\041\076\046\077" +
    "\043\100\012\001\002\000\004\004\303\001\002\000\060" +
    "\002\uffea\003\uffea\005\uffea\006\uffea\007\uffea\014\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\032\uffea\035\uffea\037\uffea" +
    "\041\uffea\042\uffea\051\uffea\053\uffea\066\uffea\070\uffea\076" +
    "\uffea\077\uffea\100\uffea\101\uffea\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\050\006\037\007\007\013\027\015\051\016\031" +
    "\017\024\020\036\021\044\022\035\023\010\024\041\025" +
    "\020\026\006\031\005\032\013\033\016\034\033\035\034" +
    "\036\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\276\022\035\023\010\024\041\032\013\033\054\035" +
    "\056\036\055\001\001\000\002\001\001\000\004\033\271" +
    "\001\001\000\016\022\035\023\270\032\013\033\054\035" +
    "\056\036\055\001\001\000\002\001\001\000\022\021\267" +
    "\022\035\023\010\024\041\032\013\033\054\035\056\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\245\001\001\000\022\021\231\022\035\023\010\024" +
    "\041\032\013\033\054\035\056\036\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\230\022\035\023" +
    "\010\024\041\032\013\033\054\035\056\036\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\013\027\015\137\016" +
    "\031\017\024\020\036\021\044\022\035\023\010\024\041" +
    "\032\013\033\134\035\034\036\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\156" +
    "\022\035\023\010\024\041\032\013\033\054\035\056\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\103\001\001\000\002\001\001\000\024\012\057\021" +
    "\053\022\035\023\010\024\041\032\013\033\054\035\056" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\062\022\035\023\010\024\041\032\013\033\054\035\056" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\073\022\035\023\010\024\041\032\013\033\054" +
    "\035\056\036\055\001\001\000\022\021\070\022\035\023" +
    "\010\024\041\032\013\033\054\035\056\036\055\001\001" +
    "\000\022\021\067\022\035\023\010\024\041\032\013\033" +
    "\054\035\056\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\072\022\035\023\010\024\041\032" +
    "\013\033\054\035\056\036\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\075\021\053\022\035\023" +
    "\010\024\041\032\013\033\054\035\056\036\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\100\021" +
    "\053\022\035\023\010\024\041\032\013\033\054\035\056" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\107\031\105" +
    "\033\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\151\033\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\125\001\001" +
    "\000\046\006\133\013\027\015\051\016\031\017\024\020" +
    "\036\021\044\022\035\023\010\024\041\025\127\030\126" +
    "\031\005\032\013\033\016\034\131\035\034\036\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\142" +
    "\001\001\000\002\001\001\000\004\033\140\001\001\000" +
    "\034\013\027\015\137\016\031\017\024\020\036\021\044" +
    "\022\035\023\010\024\041\032\013\033\134\035\034\036" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\146\001\001\000\046\006\147\013\027\015" +
    "\051\016\031\017\024\020\036\021\044\022\035\023\010" +
    "\024\041\025\127\030\126\031\005\032\013\033\016\034" +
    "\131\035\034\036\025\001\001\000\034\013\027\015\137" +
    "\016\031\017\024\020\036\021\044\022\035\023\010\024" +
    "\041\032\013\033\134\035\034\036\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\163\013\027\015\051\016\031" +
    "\017\024\020\036\021\044\022\035\023\010\024\041\032" +
    "\013\033\134\035\034\036\025\001\001\000\034\013\027" +
    "\015\137\016\031\017\024\020\036\021\044\022\035\023" +
    "\010\024\041\032\013\033\134\035\034\036\025\001\001" +
    "\000\002\001\001\000\016\022\035\023\221\032\013\033" +
    "\054\035\056\036\055\001\001\000\016\022\035\023\220" +
    "\032\013\033\054\035\056\036\055\001\001\000\016\022" +
    "\035\023\217\032\013\033\054\035\056\036\055\001\001" +
    "\000\016\022\035\023\216\032\013\033\054\035\056\036" +
    "\055\001\001\000\016\022\035\023\215\032\013\033\054" +
    "\035\056\036\055\001\001\000\016\022\035\023\214\032" +
    "\013\033\054\035\056\036\055\001\001\000\016\022\035" +
    "\023\174\032\013\033\054\035\056\036\055\001\001\000" +
    "\002\001\001\000\016\022\035\023\213\032\013\033\054" +
    "\035\056\036\055\001\001\000\016\022\035\023\212\032" +
    "\013\033\054\035\056\036\055\001\001\000\016\022\035" +
    "\023\211\032\013\033\054\035\056\036\055\001\001\000" +
    "\016\022\035\023\210\032\013\033\054\035\056\036\055" +
    "\001\001\000\022\021\206\022\035\023\010\024\041\032" +
    "\013\033\054\035\056\036\055\001\001\000\016\022\035" +
    "\023\205\032\013\033\054\035\056\036\055\001\001\000" +
    "\004\033\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\224\022\035\023\010\024\041\032\013\033" +
    "\225\035\227\036\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\233\001\001\000\004" +
    "\011\236\001\001\000\002\001\001\000\022\021\237\022" +
    "\035\023\010\024\041\032\013\033\054\035\056\036\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\241\001\001\000\004\011\242\001\001\000\002\001\001" +
    "\000\004\010\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\255\025\256\031\005\033\106\034\254\001\001\000\002" +
    "\001\001\000\012\025\265\031\005\033\106\034\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\273\022\035\023\010\024\041\032\013\033\054\035\056" +
    "\036\055\001\001\000\002\001\001\000\004\010\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ChocoPyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ChocoPyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ChocoPyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The following fields and methods deal with error reporting
     * Avoid changing these unless you know what you are doing. */

    /** Node that accumulates error messages to be added to the Program
     *  node produced as a result. */
    public final Errors errors = new Errors(new ArrayList<>());
    
    // For generating compile error token
    private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

    /** Return the Program node that results from parsing the stream of
     *  tokens produced by lexical analysis.  In the case of syntax errors,
     *  the program may be empty, but will have error messages. */
    public Program parseProgram(boolean debug) {
        try {
            Symbol result = debug ? debug_parse() : parse();
            if (result == null || !(result.value instanceof Program)) {
                return new Program(new Location(0, 0), new Location(0, 0),
                                   new ArrayList<Declaration>(),
                                   new ArrayList<Stmt>(),
                                   errors);
            } else {
                return (Program) result.value;
            }
        } catch (RuntimeException excp) {
            throw excp;
        } catch (Exception excp) {
            String msg =
                String.format("Internal parser error detected: %s%n", excp);
            throw new AssertionError(msg);
        }
    }

    @Override
    public SymbolFactory getSymbolFactory() {
        return ((ChocoPyLexer) getScanner()).symbolFactory;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
                String token = symbl_name_from_id(cur_token.sym);
                //String text = ((ChocoPyLexer) getScanner()).yytext();
                String text = cur_token.value.toString();
                errors.syntaxError(
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xleft,
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xright,
                    "Parse error near token %s: %s", token, text);
    }
    
    public void syntax_error(Symbol cur_token, String reasons) {
                String token = symbl_name_from_id(cur_token.sym);
                //String text = ((ChocoPyLexer) getScanner()).yytext();
                String text = cur_token.value.toString();
                if(reasons != null){
                  text = text + '\n' + reasons;
                }
                errors.syntaxError(
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xleft,
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xright,
                    "Parse error near token %s: %s", token, text);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        /* Do not die */
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ChocoPyParser$actions {



    /** Return a mutable list initially containing the single value ITEM. */
    <T> List<T> single(T item) {
        List<T> list = new ArrayList<>();
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** If ITEM is non-null, appends it to the end of LIST.  Then returns
     *  LIST. */
    <T> List<T> combine(List<T> list, T item) {
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** Return a mutable empty list. */
    <T> List<T> empty() {
        return new ArrayList<T>();
    }

    /** Return the leftmost non-whitespace location in NODES, or null if NODES
     *  is empty.  Assumes that the nodes of NODES are ordered in increasing
     *  order of location, from left to right. */
    ComplexSymbolFactory.Location getLeft(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;
        }
        Node first = nodes.get(0);
        return new ComplexSymbolFactory.Location(first.getLocation()[0],
                                                 first.getLocation()[1]);
    }

    ComplexSymbolFactory.Location getRight(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;
        }
        Node last = nodes.get(nodes.size()-1);
        return new ComplexSymbolFactory.Location(last.getLocation()[2],
                                                 last.getLocation()[3]);
    }


  private final ChocoPyParser parser;

  /** Constructor */
  CUP$ChocoPyParser$actions(ChocoPyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ChocoPyParser$do_action_part00000000(
    int                        CUP$ChocoPyParser$act_num,
    java_cup.runtime.lr_parser CUP$ChocoPyParser$parser,
    java.util.Stack            CUP$ChocoPyParser$stack,
    int                        CUP$ChocoPyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ChocoPyParser$result;

      /* select the action based on the action number */
      switch (CUP$ChocoPyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		RESULT = start_val;
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ChocoPyParser$parser.done_parsing();
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_head opt_stmt_list 
            {
              Program RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> d = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = new Program(d.isEmpty() ? getLeft(s) : getLeft(d),
                                sxright, d, s, errors); 
         
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_head ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_head",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_head ::= program_head class_def 
            {
              List<Declaration> RESULT =null;
		Location hxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location hxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> h = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location cdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location cdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		ClassDef cd = (ClassDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(h,cd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_head",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_head ::= program_head func_def 
            {
              List<Declaration> RESULT =null;
		Location hxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location hxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> h = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(h,fd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_head",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_head ::= program_head var_def 
            {
              List<Declaration> RESULT =null;
		Location hxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location hxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> h = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(h,vd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_head",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opt_declare_list ::= opt_declare_list declare 
            {
              List<Declaration> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> l = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(l,d); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_declare_list",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opt_declare_list ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_declare_list",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declare ::= func_def 
            {
              Declaration RESULT =null;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = fd; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declare ::= var_def 
            {
              Declaration RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = vd; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declare ::= GLOBAL identifier NEWLINE 
            {
              Declaration RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = new GlobalDecl(gxleft,idxright,id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declare ::= NONLOCAL identifier NEWLINE 
            {
              Declaration RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = new NonLocalDecl(lxleft,idxright,id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declare",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_def ::= CLASS identifier LPAREN identifier RPAREN COLON NEWLINE INDENT PASS NEWLINE DEDENT 
            {
              ClassDef RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xright;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).value;
		Location nlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location nlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassDef(cxleft,nlxright,id,id2,empty()); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_def",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_def ::= CLASS identifier LPAREN identifier RPAREN COLON NEWLINE INDENT class_declare DEDENT 
            {
              ClassDef RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location cdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> cd = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassDef(cxleft,cdxright,id,id2,cd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_def",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_declare ::= func_def 
            {
              List<Declaration> RESULT =null;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(fd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_declare ::= var_def 
            {
              List<Declaration> RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(vd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_declare ::= class_declare func_def 
            {
              List<Declaration> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> l = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		FuncDef fd = (FuncDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                                                  RESULT = (fd != null)? combine(l,fd) : l; 
                                               
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_declare ::= class_declare var_def 
            {
              List<Declaration> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> l = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		VarDef vd = (VarDef)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(l,vd); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_declare ::= class_declare error 
            {
              List<Declaration> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> l = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_declare ::= error 
            {
              List<Declaration> RESULT =null;
		 RESULT=empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("class_declare",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func_def ::= DEF identifier LPAREN typedvar_list RPAREN ARROW type COLON NEWLINE INDENT opt_declare_list stmt_list DEDENT 
            {
              FuncDef RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		List<TypedVar> tl = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location taxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location taxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		TypeAnnotation ta = (TypeAnnotation)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Declaration> dl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new FuncDef(dxleft,getRight(sl),id,tl,ta,dl,sl); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // func_def ::= DEF identifier LPAREN typedvar_list RPAREN COLON NEWLINE INDENT opt_declare_list stmt_list DEDENT 
            {
              FuncDef RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xright;
		List<TypedVar> tl = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String rp = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location nlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location nlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Declaration> dl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 ClassType renone = new ClassType(cxright,cxright,"<None>");
                RESULT = new FuncDef(dxleft,getRight(sl),id,tl,renone,dl,sl); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-10)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func_def ::= DEF error DEDENT 
            {
              FuncDef RESULT =null;
		 RESULT = null; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_def ::= typedvar EQ literal NEWLINE 
            {
              VarDef RESULT =null;
		Location tvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location tvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		TypedVar tv = (TypedVar)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = new VarDef(tvxleft,lxright,tv,l); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("var_def",26, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typedvar ::= identifier COLON type 
            {
              TypedVar RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		TypeAnnotation t = (TypeAnnotation)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new TypedVar(idxleft,txright,id,t); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar",23, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new Identifier(idxleft,idxright,id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("identifier",25, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= IDENTIFIER 
            {
              TypeAnnotation RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassType(idxleft,idxright,id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= IDSTRING 
            {
              TypeAnnotation RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String ids = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ClassType(idsxleft,idsxright,
                                        ids.substring(1,ids.length()-1)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= LINDEX type RINDEX 
            {
              TypeAnnotation RESULT =null;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String ld = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		TypeAnnotation t = (TypeAnnotation)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rd = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ListType(ldxleft,rdxright,t); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typedvar_list ::= typedvar 
            {
              List<TypedVar> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		TypedVar t = (TypedVar)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(t); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typedvar_list ::= typedvar_list COMMA typedvar 
            {
              List<TypedVar> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<TypedVar> l = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		TypedVar t = (TypedVar)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(l,t); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typedvar_list ::= typedvar_list COMMA error 
            {
              List<TypedVar> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<TypedVar> l = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typedvar_list ::= 
            {
              List<TypedVar> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("typedvar_list",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opt_stmt_list ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",5, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opt_stmt_list ::= stmt_list 
            {
              List<Stmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",5, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt_list ::= stmt 
            {
              List<Stmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt_list ::= stmt_list stmt 
            {
              List<Stmt> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(l, s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt_list ::= stmt_list error 
            {
              List<Stmt> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt_list ::= error 
            {
              List<Stmt> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= simple_stmt NEWLINE 
            {
              Stmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= WHILE expr COLON block 
            {
              Stmt RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new WhileStmt(wxleft, getRight(b), e, b); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= FOR identifier IN expr COLON block 
            {
              Stmt RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ForStmt(fxleft, getRight(b), id, e, b); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= IF expr COLON block opt_elif_list 
            {
              Stmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IfStmt(opxleft, getRight(b), e, b, l); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= IF expr COLON block 
            {
              Stmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IfStmt(opxleft, getRight(b), e, b, empty()); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opt_elif_list ::= ELIF expr COLON block opt_elif_list 
            {
              List<Stmt> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 Stmt s = new IfStmt(opxleft,getRight(l),e,b,l);
                         RESULT =single(s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_elif_list",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opt_elif_list ::= ELIF expr COLON block 
            {
              List<Stmt> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 Stmt s =new IfStmt(opxleft,getRight(b),e,b,empty());
                         RESULT = single(s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_elif_list",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opt_elif_list ::= ELSE COLON block 
            {
              List<Stmt> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT=b; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_elif_list",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // block ::= NEWLINE INDENT stmt_list DEDENT 
            {
              List<Stmt> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_stmt ::= expr_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_stmt ::= assign_stmt 
            {
              Stmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_stmt ::= RETURN expr 
            {
              Stmt RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ReturnStmt(rxleft,exright,e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_stmt ::= RETURN 
            {
              Stmt RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ReturnStmt(rxleft,rxright,null); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_stmt ::= PASS 
            {
              Stmt RESULT =null;
		
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_stmt ::= expr 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ExprStmt(exleft, exright, e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign_stmt ::= assign_targets EQ expr 
            {
              Stmt RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> l = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new AssignStmt(lxleft,exright,l,e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign_targets ::= identifier 
            {
              List<Expr> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assign_targets ::= member_expr 
            {
              List<Expr> RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr me = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(me); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assign_targets ::= index_expr 
            {
              List<Expr> RESULT =null;
		Location idexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr ide = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(ide); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_targets ::= assign_targets EQ identifier 
            {
              List<Expr> RESULT =null;
		Location atxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location atxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> at = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(at,id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_targets ::= assign_targets EQ member_expr 
            {
              List<Expr> RESULT =null;
		Location atxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location atxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> at = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr me = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(at,me); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assign_targets ::= assign_targets EQ index_expr 
            {
              List<Expr> RESULT =null;
		Location atxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location atxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> at = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location idexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr ide = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(at,ide); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_targets",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_list ::= expr 
            {
              List<Expr> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_list ::= expr_list COMMA expr 
            {
              List<Expr> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> l = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(l,e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_list ::= expr_list COMMA error 
            {
              List<Expr> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> l = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_list ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= cexpr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new UnaryExpr(opxleft,exright,op,e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr IF expr ELSE expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IfExpr(e1xleft,e3xright,e2,e1,e3); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cexpr ::= pexpr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cexpr ::= cexpr EQEQ pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cexpr ::= cexpr NEQ pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cexpr ::= cexpr LE pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cexpr ::= cexpr GE pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cexpr ::= cexpr LT pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cexpr ::= cexpr GT pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cexpr ::= cexpr IS pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("cexpr",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // pexpr ::= binary_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // pexpr ::= literal 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pexpr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pexpr ::= identifier 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pexpr ::= identifier LPAREN expr_list RPAREN 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lp = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> l = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rp = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new CallExpr(idxleft, rpxright, id, l); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pexpr ::= LINDEX expr_list RINDEX 
            {
              Expr RESULT =null;
		Location lopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lop = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> l = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location ropxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location ropxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rop = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ListExpr(lopxleft, ropxright, l); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // pexpr ::= member_expr 
            {
              Expr RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr me = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = me; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // pexpr ::= member_expr LPAREN expr_list RPAREN 
            {
              Expr RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		MemberExpr me = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String l = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String r = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new MethodCallExpr(mexleft, rxright, me, el); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // pexpr ::= index_expr 
            {
              Expr RESULT =null;
		Location idexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr ide = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = ide; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // pexpr ::= MINUS pexpr 
            {
              Expr RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new UnaryExpr(opxleft, exright, op, e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("pexpr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // member_expr ::= pexpr DOT identifier 
            {
              MemberExpr RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new MemberExpr(pxleft, idxright, p, id); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("member_expr",27, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // index_expr ::= pexpr LINDEX expr RINDEX 
            {
              IndexExpr RESULT =null;
		Location p1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location p1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr p1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location op1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location op1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location p2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location p2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Expr p2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location op2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location op2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IndexExpr(p1xleft, op2xright, p1, p2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("index_expr",28, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= NONE 
            {
              Literal RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new NoneLiteral(lxleft, lxright); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= TRUE 
            {
              Literal RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(lxleft, lxright, l); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= FALSE 
            {
              Literal RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(lxleft, lxright, l); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(nxleft, nxright, n); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= STRING 
            {
              Literal RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new StringLiteral(sxleft, sxright, 
                                          s.substring(1,s.length()-1)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= IDSTRING 
            {
              Literal RESULT =null;
		Location idsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location idsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String ids = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new StringLiteral(idsxleft, idsxright,
                                          ids.substring(1,ids.length()-1)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binary_expr ::= pexpr PLUS pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binary_expr ::= pexpr MINUS pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binary_expr ::= pexpr MULT pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binary_expr ::= pexpr DIV pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binary_expr ::= pexpr MOD pexpr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft,e2xright,e1,op,e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ChocoPyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ChocoPyParser$do_action(
    int                        CUP$ChocoPyParser$act_num,
    java_cup.runtime.lr_parser CUP$ChocoPyParser$parser,
    java.util.Stack            CUP$ChocoPyParser$stack,
    int                        CUP$ChocoPyParser$top)
    throws java.lang.Exception
    {
              return CUP$ChocoPyParser$do_action_part00000000(
                               CUP$ChocoPyParser$act_num,
                               CUP$ChocoPyParser$parser,
                               CUP$ChocoPyParser$stack,
                               CUP$ChocoPyParser$top);
    }
}

}
